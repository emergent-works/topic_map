<?php

function topic_map_theme($existing, $type, $theme, $path) {
  return array(
    'taxonomy_term__topic_maps' => [
      'template' => 'topic_map',
      'variables' => NULL,
    ],
    'taxonomy_term__collection' => [
      'template' => 'collection',
      'variables' => NULL,
    ],
    'taxonomy_term' => [
      'template' => 'other_taxonomy_term',
      'variables' => NULL,
    ]
  );
}

require_once "src/TopicRelations.php";
//require_once "topic_map.views_execution.inc";    // Doesn't work https://drupal.stackexchange.com/questions/245447
use Drupal\topic_map\TopicRelations;

// Implement hook_form_alter
// Adds CSS which removes the UI for the standard hierarchy when dealing with topics and topic maps.
function topic_map_form_alter(&$form,  &$form_state, $form_id) {
  if ($form_id == "taxonomy_overview_terms") {
    $vocab_id = \Drupal::routeMatch()->getParameters()->get('taxonomy_vocabulary')->id();
    if ($vocab_id == "topic" || $vocab_id == "topic_maps") {
      $form['#attached']['library'][] = 'topic_map/relations';
    }
  }
  // Add the appropriate CSS and validation to edit forms
  $is_topic_map = array_key_exists('field_topics', $form);
  $is_topic = array_key_exists('field_topicmap_children', $form) && array_key_exists('field_topicmap_parents', $form) && array_key_exists('field_topicmap_neighbours', $form);
  if ($is_topic_map || $is_topic) {
    $form['#attached']['library'][] = 'topic_map/relations';
  }
  if ($is_topic) {
    $form['#validate'][] = 'TopicRelations_validate';
  }
}

// Implements hook_taxonomy_term_insert.
function topic_map_taxonomy_term_insert($term) {
  $tr = new TopicRelations();
  $tr->onInsert($term);
}

// Implements hook_taxonomy_term_update.
function topic_map_taxonomy_term_update($term) {
  $tr = new TopicRelations();
  $tr->onUpdate($term);
}

function topic_map_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
  if  ($route_name == "entity.taxonomy_vocabulary.overview_form") {
     // Places this text on all vocabulary overview pages. Whether it is shown is governed by condtionally-loaded CSS
    return "<p class='hidden' id='replacement_taxonomy_help'>This vocabulary uses the Topic Map module and therefore the default hierarchical relationships between terms are disabled. You can use the fields to create relationships between terms.</p>";
  }
  if ($route_name == 'help.page.topic_map') {
    return "For documentation please see <a href='https://github.com/hoegrammer/topic_map/blob/master/README.md'>the detailed README on github</a>";
  }
}

// Stops the user from relating a term to itself
function TopicRelations_validate($form, $form_state) {
  $term_id = $form_state->getFormObject()->getEntity()->id();
  if (!$term_id) return; // this is empty when creating a new term
  $children = $form_state->getValue('field_topicmap_children');
  for($i = 0; $i < sizeof($children); $i++) {
    if(isset($children[$i]) && is_array($children[$i]) && $children[$i]['target_id'] == $term_id) {
      $form_state->setErrorByName("field_topicmap_children][$i", t('A term cannot be its own child'));
    }
  }
  $parents = $form_state->getValue('field_topicmap_parents');
  for($i = 0; $i < sizeof($parents); $i++) {
    if(isset($parents[$i]) && is_array($parents[$i]) && $parents[$i]['target_id'] == $term_id) {
      $form_state->setErrorByName("field_topicmap_parents][$i", t('A term cannot be its own parent'));
    }
  }
  $neighbours = $form_state->getValue('field_topicmap_neighbours');
  for($i = 0; $i < sizeof($neighbours); $i++) {
    if(isset($neighbours[$i]) && is_array($neighbours[$i]) && $neighbours[$i]['target_id'] == $term_id) {
      $form_state->setErrorByName("field_topicmap_neighbours][$i", t('A term cannot be its own neighbour'));
    }
  }
}

