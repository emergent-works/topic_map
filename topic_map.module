<?php


require_once "src/TopicRelations.php";
//require_once "topic_map.views_execution.inc";    // Doesn't work https://drupal.stackexchange.com/questions/245447
use Drupal\topic_map\TopicRelations;

// Implement hook_form_alter.
function topic_map_form_alter(&$form,  &$form_state, $form_id) {
  if ($form_id == "taxonomy_overview_terms") {
    $vocab_id = \Drupal::routeMatch()->getParameters()->get('taxonomy_vocabulary')->id();
    $field_topicmap_definitions = \Drupal::entityManager()->getFieldDefinitions('taxonomy_term', $vocab_id);
    $field_topicmap_names = array();
    foreach($field_topicmap_definitions as $def) {
      $field_topicmap_names[] = $def->getName();
    }
    // If these fields are present on the vocabulary definition then it is a topic map vocabulary so load the approproate CSS.
    if (in_array('field_topicmap_children', $field_topicmap_names) && in_array('field_topicmap_parents', $field_topicmap_names) && in_array('field_topicmap_neighbours', $field_topicmap_names)) {
      $form['#attached']['library'][] = 'topic_map/relations';
    }
  }
  // If these fields are present, we are on the edit form for a term belonging to a topic map vocabulary.
  // so load the appropriate validation and CSS.
  if (array_key_exists('field_topicmap_children', $form) && array_key_exists('field_topicmap_parents', $form) && array_key_exists('field_topicmap_neighbours', $form) ) {
    $form['#validate'][] = 'TopicRelations_validate';
    $form['#attached']['library'][] = 'topic_map/relations';
  }
}

// Implements hook_taxonomy_term_insert.
function topic_map_taxonomy_term_insert($term) {
  $tr = new TopicRelations();
  $tr->onInsert($term);
}

// Implements hook_taxonomy_term_update.
function topic_map_taxonomy_term_update($term) {
  $tr = new TopicRelations();
  $tr->onUpdate($term);
}

function topic_map_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
  if  ($route_name == "entity.taxonomy_vocabulary.overview_form") {
     // Places this text on all vocabulary overview pages. Whether it is shown is governed by condtionally-loaded CSS
    return "<p class='hidden' id='replacement_taxonomy_help'>This vocabulary uses the Topic Map module and therefore the default hierarchical relationships between terms are disabled. You can use the fields to create relationships between terms. The topic map for this vocabulary is available as a block. </p>";
  }
  if ($route_name == 'help.page.topic_map') {
    return "For documentation please see <a href='https://github.com/hoegrammer/topic_map/blob/master/README.md'>the detailed README on github</a>";
  }
}

// Stops the user from relating a term to itself
function TopicRelations_validate($form, $form_state) {
  $term_id = $form_state->getFormObject()->getEntity()->id();
  if (!$term_id) return; // this is empty when creating a new term
  $children = $form_state->getValue('field_topicmap_children');
  for($i = 0; $i < sizeof($children); $i++) {
    if(is_array($children[$i]) && $children[$i]['target_id'] == $term_id) {
      $form_state->setErrorByName("field_topicmap_children][$i", t('A term cannot be its own child'));
    }
  }
  $parents = $form_state->getValue('field_topicmap_parents');
  for($i = 0; $i < sizeof($parents); $i++) {
    if(is_array($parents[$i]) && $parents[$i]['target_id'] == $term_id) {
      $form_state->setErrorByName("field_topicmap_parents][$i", t('A term cannot be its own parent'));
    }
  }
  $neighbours = $form_state->getValue('field_topicmap_neighbours');
  for($i = 0; $i < sizeof($neighbours); $i++) {
    if(is_array($neighbours[$i]) && $neighbours[$i]['target_id'] == $term_id) {
      $form_state->setErrorByName("field_topicmap_neighbours][$i", t('A term cannot be its own neighbour'));
    }
  }
}

